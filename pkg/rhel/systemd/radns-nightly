#!/usr/bin/perl
#
#   Gargoyle Client Software.  Tools to read, analyze and manage Argus data.
#   Copyright (c) 2000-2017 QoSient, LLC
#   All Rights Reserved
#
#  THE ACCOMPANYING PROGRAM IS PROPRIETARY SOFTWARE OF QoSIENT, LLC,
#  AND CANNOT BE USED, DISTRIBUTED, COPIED OR MODIFIED WITHOUT
#  EXPRESS PERMISSION OF QoSIENT, LLC.
#
#  QOSIENT, LLC DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
#  SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
#  AND FITNESS, IN NO EVENT SHALL QOSIENT, LLC BE LIABLE FOR ANY
#  SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
#  IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
#  ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
#  THIS SOFTWARE.
#
#   radns-nightly - DNS nightly scripts to manage dns databases.
#                   Need to generate dnsNames table (radnsdb).
#
#
# Complain about undeclared variables
use v5.6.0;
use strict;
use warnings;

use POSIX;
use File::Which qw/ which where /;
use Time::Local;

$ENV{'PATH'} = "/bin:/usr/bin:/usr/sbin:/usr/local/bin";

# Parse the arguments if any
my @arglist = ();

my $debug       = 0;
my $done        = 0;

my $time;
my $dbtime;
my $filter;
my $dbase       = "dnsNames";
my $table;

ARG: while (my $arg = shift(@ARGV)) {
    if (!$done) {
      for ($arg) {
         s/^-debug$//      && do { $debug++; next ARG; };
         s/^-time$//       && do { $time = shift(@ARGV); next ARG; };
         s/^-dbase$//      && do { $dbase = shift(@ARGV); next ARG; };
         s/^-table$//      && do { $table = shift(@ARGV); next ARG; };
      }
    } else {
      for ($arg) {
         s/\(/\\\(/        && do { ; };
         s/\)/\\\)/        && do { ; };
      }
   }
    $arglist[@arglist + 0] = $arg;
}

if ($time eq "") {
   my ($sec, $min, $hour, $mday, $mon, $year) = localtime();
   my  $yesterday = timelocal(0,0,12,$mday,$mon,$year) - 24*60*60;
   ($sec, $min, $hour, $mday, $mon, $year) = localtime($yesterday);

     $time = sprintf "%4d/%02d/%02d", $year+1900, $mon+1, $mday;
   $dbtime = sprintf "%4d_%02d_%02d", $year+1900, $mon+1, $mday;

} else {
   ($dbtime = $time) =~ s/\//_/g;
}

my $radnsdb = which 'radnsdb';

my $cmd = $radnsdb.' -t '.$time.' -w mysql://root@localhost/'.$dbase.'/dns_'.$dbtime.' 2>&1';
my @output = `$cmd`;
foreach (@output) {
   print;
}
