/*
 * Gargoyle Client Software. Tools to read, analyze and manage Argus data.
 * Copyright (c) 2000-2014 QoSient, LLC
 * All rights reserved.
 *
 * THE ACCOMPANYING PROGRAM IS PROPRIETARY SOFTWARE OF QoSIENT, LLC,
 * AND CANNOT BE USED, DISTRIBUTED, COPIED OR MODIFIED WITHOUT
 * EXPRESS PERMISSION OF QoSIENT, LLC.
 *
 * QOSIENT, LLC DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS, IN NO EVENT SHALL QOSIENT, LLC BE LIABLE FOR ANY
 * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 * THIS SOFTWARE.
 *
 */

/*
 * rap.c - test program to develop sessionization logic for flow data
 *         analytics.  This uses flow based splitting methods to achieve
 *         sessionization, but there is a lot of work needed to generalize
 *         the methods.
 *
 *         Currently, we developing a 3-pass strategy.
 *            1 - session tracks, eapol, arp and ethernet/IP address mappings.
 *                This strategy will achieve:
 *                   what ethernet address is the target...generalizable to a set of addrs
 *                   which layer objects are sessionizable
 *                      eapol for wireless
 *                      ethernet arp for L2 sessions
 *                      IP addresses for L3 sessions
 *
 * Written by Carter Bullard
 * Copyright QoSient, LLC 2000-2014
 *
 */



Mon Mar 10 07:27:46 EDT 2014
Argus NOTES

Attempts to sessionize argus data 

Currently rasplit -M flow "flow-filter" is the method for
seesionization.  rasplit() current will write out data
to files,and the occurence of a flow match, will trigger
changing files.


One sessionization method in gargoyle is to develop session 
markers, and then use these markers with rasplit -M flow "marker flow spec" 
to segment sessionized flow data.  Programs like rap(), are
designed to form markers.  rap() is looking at eapol sessions
and aggregates, based on smac and dmac, until the flow changes,
which should be when the ether dst changes.

Process is something like this:

   rap -r data.file -w data.eapol.out

Then strip out the eapol data from the original file:

   ra -r data.file -w data.sans.eapol.file - not ether proto eapol

Merge the eapol data with other flow data... and then split the
data based on the occurence of the markers:

   rasort -r data.eapol.out data.sans.eapol.file -m stime -w - \
     rasplit -M flow "ether proto eapol"


This generates a number of files that contain flow data that is
classified based on the wireless Access Point being used.

Now, we want to track the addresses that are being used in each
AP, so that we can attempt to detect AP specific behavior.

Below is a simple script to track how a specific ethernet address
is being used.  This happens to be the wireless LAN ethernet
address, so here we get the address assignment for a specific
AP, for both IPv4 and IPv6 addresses.

for i in x*; do 
   echo $i; 
   racluster -r $i -M rmon -m srcid smac saddr -w - - ip | \
   rasort -m pkts -s stime dur smac saddr:32 spkts dpkts pcr - ether src 04:0c:ce:e4:3c:2c ; 
done

